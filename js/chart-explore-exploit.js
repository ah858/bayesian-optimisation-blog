function drawChartExploreExploit() {
  // Random points generator
  // const points_true = [{x:1, y: 0.5},
  //                         {x: 4.3, y: -0.1},
  //                         {x: 4.8, y: -0.2},
  //                         {x: 5.7, y: -0.4},
  //                         {x: 6.2, y: -0.5},
  //                         {x: 8, y: 0.2},
  //                         {x: 8.7, y:0.25},
  //                         {x: 9.3, y: 0.15}]

  // User selected points
  // const points_chosen = [{x: 4.3, y: -0.1},
  //                         {x: 4.8, y: -0.2},
  //                         {x: 5.7, y: -0.4},
  //                         {x: 6.2, y: -0.5},
  //                         {x: 8, y: 0.2},
  //                         {x: 9.3, y: 0.15}];

  const points_true = [{"x":9.5,    "y":0.5},
                        {"x":24.35, "y":-0.1},
                        {"x":26.599999999999998,"y":-0.2},
                        {"x":30.650000000000002,"y":-0.4},
                        {"x":32.9,  "y":-0.5},
                        {"x":41,    "y":0.2},
                        {"x":44.14999999999999,"y":0.25},
                        {"x":46.85, "y":0.15}];


  const points_chosen = [{"x":24.35,"y":-0.1},
                        {"x":26.599999999999998,"y":-0.2},
                        {"x":30.650000000000002,"y":-0.4},
                        {"x":32.9,"y":-0.5},
                        {"x":41,"y":0.2},
                        {"x":46.85,"y":0.15}];


  // const points_true = [{"x":9.5,    "y":150},
  //                       {"x":24.35, "y":138},
  //                       {"x":26.599999999999998,"y":136},
  //                       {"x":30.650000000000002,"y":132},
  //                       {"x":32.9,  "y":130},
  //                       {"x":41,    "y":144},
  //                       {"x":44.14999999999999,"y": 145},
  //                       {"x":46.85, "y":143}];

  // const points_chosen = [{"x":24.35,"y":-0.1},
  //                       {"x":24.35, "y":138},
  //                       {"x":26.599999999999998,"y":136},
  //                       {"x":30.650000000000002,"y":132},
  //                       {"x":32.9,  "y":130},
  //                       {"x":41,    "y":144},
  //                       {"x":46.85, "y":143}];

  const svg = d3.select("#chart-explore-exploit").append("svg").attr("viewBox", [0, 0, width, height]);

  // Background y grid
  svg.append("g")
    .call(yGrid, height, width);

  svg.append("g")
    .call(xAxis, height, width);
  
  svg.append("g")
    .call(yAxis, height);

  svg.append("g")
    .call(xLabel, height, width);

  svg.append("g")
    .call(yLabel, height);
  
  // ============================
  // Set up shapes for model
  // ============================
  
  // Set up model mean and std deviations
  const modelLine = d3.line()
    .curve(d3.curveBasis)
    .x(d => xscale(d.x))
    .y(d => yscale(d.mean))
  
  const area = d3.area()
    .curve(d3.curveBasis)
    .x(d => xscale(d.x))
    .y0(d => yscale(d.lower))
    .y1(d => yscale(d.upper));
  
  const area2 = d3.area()
    .curve(d3.curveBasis)
    .x(d => xscale(d.x))
    .y0(d => yscale(d.lower2))
    .y1(d => yscale(d.upper2));
  
  // ============================
  // Add model elements to svg
  // ============================
  
  // Model parameters
  const modelMean = svg.append("g")
    .attr("stroke", "black")
    .attr("fill", "transparent");

  const envelope = svg.append("g")
    .attr("stroke", "transparent")
    .attr("fill", "rgba(0,0,100,0.05)");
  
  const envelope2 = svg.append("g")
    .attr("stroke", "transparent")
    .attr("fill", "rgba(0,0,100,0.1)");
  
  const unerlyingMean = svg.append("g")
    .attr("stroke", "red")
    .attr("stroke-dasharray", (3, 5))
    .attr("stroke-width", 2)
    .attr("fill", "transparent");
  
  // ============================
  // Add other elements to svg
  // ============================
 
  // Use rect in the background to capture click events and handle point creation
  const backgroundRect = svg.append("rect")
    .attr("width", width)
    .attr("height", height)
    // Transparent "white", a fill is required to capture click events
    .attr("fill", "#fff0");
  
  // Restrict circles to a common group to set attributes collectively and avoid selecting unwanted elements
  const circles = svg.append("g")
    .attr("fill", "black");
  
  const dist_underlying = conditional_distribution(points_true.map((d) => d.x),
                                                    points_true.map((d) => d.y),
                                                    xtilde,
                                                    kernel);
 
  // Initial drawing  
  update();

  // ============================
  // Event Listeners for buttons
  // ============================

  d3.select("#button-explore-exploit-1")
    .on("click", (event) => drawNewPoint());

  d3.select("#button-explore-exploit-2")
    .on("click", (event) => showVariance());

  d3.select("#button-explore-exploit-3")
    .on("click", (event) => showUnderlying());
  
  function update() {
  
    // Draw new circles
    circles.selectAll("circle")
      .data(points_chosen)
      .join(
        // Special handling for new elements only
        enter => enter.append("circle")
          .attr("r", 7)
      )
      // Applies to merged selection of new and old elements
      .attr("cx", d => xscale(d.x))
      .attr("cy", d => yscale(d.y));
    
    // Update conditional dist
    const dist = conditional_distribution(points_chosen.map((d) => d.x),
                                          points_chosen.map((d) => d.y),
                                          xtilde,
                                          kernel);
    
    modelMean.selectAll('.mean')
      .data([dist])
      .join('path')
      .attr('class', 'mean')
      .attr('d', d => modelLine(d));
    
    // Notify observable that the points have changed
    svg.dispatch("input");
  }
  
  const drawNewPoint = function() {

    points_chosen.push({"x":44.14999999999999,"y":0.25});

    // Draw new circles
    circles.selectAll("circle")
      .data(points_chosen)
      .join(
        // Special handling for new elements only
        enter => enter.append("circle")
          .attr("r", 7)
          .attr("fill", "red")
      )
      // Applies to merged selection of new and old elements
      .attr("cx", d => xscale(d.x))
      .attr("cy", d => yscale(d.y));
  }
  
  const showVariance = function() {
    const dist = conditional_distribution(points_chosen.map((d) => d.x),
                                          points_chosen.map((d) => d.y),
                                          xtilde,
                                          kernel);
  
    modelMean.selectAll('.mean')
      .data([dist])
      .join('path')
      .attr('class', 'mean')
      .attr('d', d => modelLine(d));
    
    envelope.selectAll('.envelope')
      .data([dist])
      .join('path')
      .attr('class', 'envelope')
      .attr('d', d => area(d));
    
    envelope2.selectAll('.envelope2')
      .data([dist])
      .join('path')
      .attr('class', 'envelope2')
      .attr('d', d => area2(d));
  }
  
  const showUnderlying = function() {
    const dist = conditional_distribution(points_true.map((d) => d.x),
                                          points_true.map((d) => d.y),
                                          xtilde,
                                          kernel);
    
    unerlyingMean.selectAll('.unerlyingMean')
      .data([dist])
      .join('path')
      .attr('class', 'unerlyingMean')
      .attr('d', d => modelLine(d));
    
    backgroundRect.on("click", "null");  
  }
  
}

drawChartExploreExploit() 